library("quanteda", quietly = TRUE, warn.conflicts = FALSE, verbose = FALSE)
# load the data
data(data_corpus_irishbudget2010)
# change doc names for readability
docnames(data_corpus_irishbudget2010)  <- paste(docvars(data_corpus_irishbudget2010, "name"), docvars(data_corpus_irishbudget2010, "party"))
# create dfm
dfm <- dfm(data_corpus_irishbudget2010, tolower = TRUE, remove_punct = TRUE, remove = stopwords("english"))
# load library
library(quanteda.textmodels)
# fit wordfish model
wf <- textmodel_wordfish(dfm, dir=c(2,1))
# plot results
textplot_scale1d(
wf,
margin = "documents",
sort = TRUE,
highlighted = NULL,
alpha = 0.7,
groups = docvars(data_corpus_irishbudget2010)$party)
# top 1000 features
top_features <- data.frame(feature = names(topfeatures(dfm, n=1000)),
frequency = topfeatures(dfm, n=1000))
# psi estimates
psi_estimates <- data.frame(
feature = wf$features,
psi = wf$psi)
# merge into single df
top_1000 <- merge(top_features, psi_estimates)
# plot
plot(x = log(top_1000$frequency),
y = top_1000$psi,
pch = 1,
col = "red",
xlab = "Logged term frequency",
ylab = "Psi estimates",
main = "Logged term frequency versus psi estimates from wordfish")
plot(log(ntoken(data_corpus_irishbudget2010)),
wf$alpha,
pch = 19,
col = "red",
xlab="Logged length in tokens of each document",
ylab="Alpha estimates from wordfish") +
title(main = "Log length in token by document versus alpha estimates")
abline(lm(wf$alpha ~ log(ntoken(data_corpus_irishbudget2010))),
col="grey50",
lty="dotted")
dist_mat <- matrix(nrow = 4, ncol = 4, data = c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0, 0.45,
0.7, 0.8, 0.45, 0))
dist <- as.dist(m = dist_mat)
dist
# hiarchical clustering the distance object
hier_clust <- hclust(as.dist(dist_mat))
# plot the dendrogram
plot(hier_clust, hang=-1)
# hiarchical clustering the distance object
hier_clust <- hclust(as.dist(dist_mat), method = "average")
# plot the dendrogram
plot(hier_clust, hang=-1) + abline(h = 0.45, lty=2)
# plot the dendrogram
plot(hier_clust, hang=-1) + abline(h = 0.45, lty=2) + abline(h = 0.30, lty=2)
# range of length
range(ntoken(uk_corpus))
library(quanteda.corpora)
# load data
data("data_corpus_ukmanifestos")
# check names of docvars for subsetting
names(docvars(data_corpus_ukmanifestos))
# subset
uk_corpus <- corpus_subset(data_corpus_ukmanifestos, Year >= 1970 & (Party == "Con" | Party == "Lab" | Party == "Lib"))
# check number of docs
ndoc(uk_corpus)
# weight dfm
wdfm <- dfm_weight(dfm, "prop")
# set random seed to ensure replicability
set.seed(777)
# perform kmeans clustering
kc_w <- kmeans(wdfm, centers = 3)
# table of cluster membership
table(kc_w$cluster)
kctwss <- c()
for(i in 1:8) {
kc = kmeans(wdfm, centers = i)
kctwss[i] <- kc$tot.withinss
}
kctwss_df <- data.frame(k = c(1:8),
twss = kctwss)
ggplot(data=kctwss_df, aes(x=k, y=twss, group=1)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title="Scree plot for k in {1:8}",
x="Number of clusters k",
y = "Total Within Sum of Squates") +
theme_classic()
library("quanteda", quietly = TRUE, warn.conflicts = FALSE, verbose = FALSE)
dist_mat <- matrix(nrow = 4, ncol = 4, data = c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0, 0.45,
0.7, 0.8, 0.45, 0))
# hiarchical clustering the distance object
hier_clust <- hclust(as.dist(dist_mat))
# plot the dendrogram
plot(hier_clust, hang=-1)
# hiarchical clustering the distance object
hier_clust <- hclust(as.dist(dist_mat), method = "average")
# plot the dendrogram
plot(hier_clust, hang=-1) + abline(h = 0.45, lty=2) + abline(h = 0.30, lty=2)
library(quanteda.corpora)
# load data
data("data_corpus_ukmanifestos")
# check names of docvars for subsetting
names(docvars(data_corpus_ukmanifestos))
# subset
uk_corpus <- corpus_subset(data_corpus_ukmanifestos, Year >= 1970 & (Party == "Con" | Party == "Lab" | Party == "Lib"))
# check number of docs
ndoc(uk_corpus)
# create dfm
dfm <- dfm(uk_corpus, verbose=TRUE, remove_punct=TRUE,
remove_numbers=TRUE, remove=stopwords("english"))
# set random seed to ensure replicability
set.seed(777)
# perform kmeans clustering
kc <- kmeans(dfm, centers = 3)
# table of cluster membership
table(kc$cluster)
# look into clusters
# by party
head(docvars(uk_corpus)$Party[kc$cluster==1])
head(docvars(uk_corpus)$Party[kc$cluster==2])
head(docvars(uk_corpus)$Party[kc$cluster==3])
# by year
head(docvars(uk_corpus)$Year[kc$cluster==1])
head(docvars(uk_corpus)$Year[kc$cluster==2])
head(docvars(uk_corpus)$Year[kc$cluster==3])
kctwss <- c()
for(i in 1:8) {
kc = kmeans(dfm, centers = i)
kctwss[i] <- kc$tot.withinss
}
kctwss_df <- data.frame(k = c(1:8),
twss = kctwss)
library(ggplot2)
ggplot(data=kctwss_df, aes(x=k, y=twss, group=1)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title="Scree plot for k in {1:8}", sx="Number of clusters k", y = "Total Within Sum of Squates") +
theme_classic()
set.seed(777)
# perform kmeans clustering
kc_2 <- kmeans(dfm, centers = 2)
# table of cluster membership
table(kc_2$cluster)
# look into clusters
# by party
table(docvars(uk_corpus)$Party[kc_2$cluster==1])
table(docvars(uk_corpus)$Party[kc_2$cluster==2])
# by Year
table(docvars(uk_corpus)$Year[kc_2$cluster==1])
table(docvars(uk_corpus)$Year[kc_2$cluster==2])
# weight dfm
wdfm <- dfm_weight(dfm, "prop")
# set random seed to ensure replicability
set.seed(777)
# perform kmeans clustering
kc_w <- kmeans(wdfm, centers = 3)
# table of cluster membership
table(kc_w$cluster)
kctwss <- c()
for(i in 1:8) {
kc = kmeans(wdfm, centers = i)
kctwss[i] <- kc$tot.withinss
}
kctwss_df <- data.frame(k = c(1:8),
twss = kctwss)
ggplot(data=kctwss_df, aes(x=k, y=twss, group=1)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title="Scree plot for k in {1:8}",
x="Number of clusters k",
y = "Total Within Sum of Squates") +
theme_classic()
# look into clusters with best fit model
# by party
head(docvars(uk_corpus)$Party[kc_w$cluster==1])
head(docvars(uk_corpus)$Party[kc_w$cluster==2])
head(docvars(uk_corpus)$Party[kc_w$cluster==3])
# by year
head(docvars(uk_corpus)$Year[kc_w$cluster==1])
head(docvars(uk_corpus)$Year[kc_w$cluster==2])
head(docvars(uk_corpus)$Year[kc_w$cluster==3])
# range of length
range(ntoken(uk_corpus))
# hierarchical clustering - get distances on normalized dfm
dist_mat <- textstat_dist(wdfm, method = "euclidean")
# hiarchical clustering the distance object
uk_cluster <- hclust(as.dist(dist_mat), method = "complete")
# label with document names
uk_cluster$labels <- docnames(wdfm)
# plot the dendrogram
plot(uk_cluster, cex = 0.6)
# hiarchical clustering the distance object
uk_cluster <- hclust(as.dist(dist_mat), method = "average")
# label with document names
uk_cluster$labels <- docnames(wdfm)
# plot the dendrogram
plot(uk_cluster, cex = 0.6)
# range of length
range(ntoken(uk_corpus))
# hierarchical clustering - get distances on normalized dfm
dist_mat <- textstat_dist(wdfm, method = "euclidean")
# hiarchical clustering the distance object
uk_cluster <- hclust(as.dist(dist_mat))
twdfm <-dfm_weight(dfm_trim(dfm, min_termfreq = 10), scheme = "prop")
# hierarchical clustering - get distances on normalized dfm
dist_mat <- textstat_dist(twdfm, method = "euclidean")
# hiarchical clustering the distance object
uk_cluster <- hclust(as.dist(dist_mat))
# plot the dendrogram
plot(uk_cluster, cex = 0.6)
# trim
twdfm <- dfm_weight(dfm_trim(dfm, min_docfreq = 5), scheme = "prop")
# hierarchical clustering - get distances on normalized dfm
dist_mat <- textstat_dist(wdfm, method = "euclidean")
# hiarchical clustering the distance object
uk_cluster <- hclust(as.dist(dist_mat))
# label with document names
uk_cluster$labels <- docnames(wdfm)
# plot the dendrogram
plot(uk_cluster, cex = 0.6)
# trim
twdfm <- dfm_weight(dfm_trim(dfm, min_termfreq = 30), scheme = "prop")
# hierarchical clustering - get distances on normalized dfm
dist_mat <- textstat_dist(wdfm, method = "euclidean")
# hierarchical clustering - get distances on normalized dfm
dist_mat <- textstat_dist(wdfm, method = "euclidean")
# hiarchical clustering the distance object
uk_cluster <- hclust(as.dist(dist_mat))
# plot the dendrogram
plot(uk_cluster, cex = 0.6)
# trim
twdfm <- dfm_weight(dfm_trim(dfm, min_termfreq = 20), scheme = "prop")
# hierarchical clustering - get distances on normalized dfm
dist_mat <- textstat_dist(wdfm, method = "euclidean")
# hiarchical clustering the distance object
uk_cluster <- hclust(as.dist(dist_mat))
# label with document names
uk_cluster$labels <- docnames(wdfm)
# plot the dendrogram
plot(uk_cluster, cex = 0.6)
blogdown::serve_site()
setwd("~/Desktop/Projects/just-another-ds-blog")
blogdown::serve_site()
setwd("~/Desktop/Projects/just-another-ds-blog/content/images")
setwd("~/Desktop/Projects/just-another-ds-blog/content")
