var optArray = [];
for (var i = 0; i < x.nodes.name.length - 1; i++) {
optArray.push(x.nodes.name[i]);
}
optArray = optArray.sort();
$(function () {
$("#search").autocomplete({
source: optArray
});
});
d3.select(".ui-widget button").node().onclick=searchNode;
function searchNode() {
debugger;
//find the node
var selectedVal = document.getElementById("search").value;
var svg = d3.select(el).select("svg");
var node = d3.select(el).selectAll(".node");
if (selectedVal == "none") {
node.style("stroke", "white").style("stroke-width", "1");
} else {
var selected = node.filter(function (d, i) {
return d.name != selectedVal;
});
selected.style("opacity", "0");
var link = svg.selectAll(".link")
link.style("opacity", "0");
d3.selectAll(".node, .link").transition()
.duration(5000)
.style("opacity", 1);
}
}
}
'
)
browsable(
attachDependencies(
tagList(
tags$head(
tags$link(
href="http://code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css",
rel="stylesheet"
)
),
HTML(
'
<div class="ui-widget">
<input id="search">
<button type="button">Search</button>
</div>
'
),
network
),
list(
rmarkdown::html_dependency_jquery(),
rmarkdown::html_dependency_jqueryui()
)
)
)
network <- htmlwidgets::onRender(
network,
'
function(el,x){
debugger;
var optArray = [];
for (var i = 0; i < x.nodes.name.length - 1; i++) {
optArray.push(x.nodes.name[i]);
}
optArray = optArray.sort();
$(function () {
$("#search").autocomplete({
source: optArray
});
});
d3.select(".ui-widget button").node().onclick=searchNode;
function searchNode() {
debugger;
//find the node
var selectedVal = document.getElementById("search").value;
var svg = d3.select(el).select("svg");
var node = d3.select(el).selectAll(".node");
if (selectedVal == "none") {
node.style("stroke", "white").style("stroke-width", "1");
} else {
var selected = node.filter(function (d, i) {
return d.name != selectedVal;
});
selected.style("opacity", "0");
var link = svg.selectAll(".link")
link.style("opacity", "0");
d3.selectAll(".node, .link").transition()
.duration(5000)
.style("opacity", 1);
}
}
}
'
)
browsable(
attachDependencies(
tagList(
tags$head(
tags$link(
href="http://code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css",
rel="stylesheet"
)
),
HTML(
'
<div class="ui-widget">
<input id="search">
<button type="button">Search</button>
</div>
'
),
network
),
list(
rmarkdown::html_dependency_jquery(),
rmarkdown::html_dependency_jqueryui()
)
)
)
# create a dataset:
data <- fromJSON(file = "graph.json")
from <- c()
to <- c()
for(i in 1:length(data$links)) {
from[i] <- data[["links"]][[i]][["source"]]
to[i] <- data[["links"]][[i]][["target"]]
}
networkData <- data.frame(from, to)
# Plot
p <- simpleNetwork(networkData, height="100px", width="100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 10,          # distance between node. Increase this value to have more space between nodes
charge = -500,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "helvetica",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
saveWidget(p, file="networkInteractive1.html", background = "black")
# create a dataset:
data <- fromJSON(file = "graph.json")
from <- c()
to <- c()
for(i in 1:length(data$links)) {
from[i] <- data[["links"]][[i]][["source"]]
to[i] <- data[["links"]][[i]][["target"]]
}
networkData <- data.frame(from, to)
# Plot
p <- simpleNetwork(networkData, height="100px", width="100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 10,          # distance between node. Increase this value to have more space between nodes
charge = -500,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "helvetica",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
# save the widget
library(htmlwidgets)
# Plot
p <- simpleNetwork(networkData, height="100px", width="100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 10,          # distance between node. Increase this value to have more space between nodes
charge = -500,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "helvetica",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#56EEF4",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
# save the widget
library(htmlwidgets)
saveWidget(p, file="networkInteractive1.html", background = "black")
saveWidget(p, file="networkInteractive1.html", background = "black", title = "My Messenger Universe")
# save the widget
library(htmlwidgets)
saveWidget(p, file="networkInteractive1.html", background = "black", title = "My Messenger Universe")
saveWidget(p, file="networkInteractive1.html", background = "white", title = "My Messenger Universe")
saveWidget(p, file="networkInteractive1.html", background = "black", title = class(p)[[1]])
# create a dataset:
data <- fromJSON(file = "graph.json")
from <- c()
to <- c()
for(i in 1:length(data$links)) {
from[i] <- data[["links"]][[i]][["source"]]
to[i] <- data[["links"]][[i]][["target"]]
}
networkData <- data.frame(from, to)
# Plot
p <- simpleNetwork(networkData, height="100px", width="100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 10,          # distance between node. Increase this value to have more space between nodes
charge = -500,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "helvetica",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#56EEF4",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
# Plot
p <- simpleNetwork(networkData, height="100px", width="100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 10,          # distance between node. Increase this value to have more space between nodes
charge = -900,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "helvetica",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#56EEF4",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
# save the widget
library(htmlwidgets)
saveWidget(p, file="networkInteractive1.html", background = "black", title = class(p)[[1]])
setwd("~/Desktop/Projects/Ethi/data-exploration/messages")
# Libraries
library(igraph)
library(networkD3)
library(rjson)
# create a dataset:
data <- fromJSON(file = "graph.json")
from <- c()
to <- c()
weight <- c()
for(i in 1:length(data$links)) {
from[i] <- data[["links"]][[i]][["source"]]
to[i] <- data[["links"]][[i]][["target"]]
weight[i] <- data[["links"]][[i]][["weight"]]
}
l = length(unique(c(from, to))) - 1
nodes_df <- data.frame(vertices = unique(c(from, to)),
index = c(0:l), stringsAsFactors = F,
group = 1)
edges_df <- data.frame(source = from,
target = to,
weight = weight)
node_size_source <- as.data.frame(table(edges_df$source), stringsAsFactors = F)
node_size_target <- as.data.frame(table(edges_df$target), stringsAsFactors = F)
node_size <- merge(node_size_source, node_size_target, by = "Var1")
node_size$size <- node_size$Freq.x + node_size$Freq.y
merge1 <- merge(nodes_df, edges_df, by.x = "vertices", by.y = "source")
merge2 <- merge(nodes_df, merge1, by.x = "vertices", by.y = "target")
p <- forceNetwork(Links = merge2, Source = "index.x", Target = "index.y", Value = "weight",
Nodes = nodes_df, NodeID = "vertices", Group = "group",
linkWidth = JS("function(d) { return d.value}"),
linkDistance = JS("function(d){return d.value * 100}"),
charge = -1000, fontFamily = "helvetica",
radiusCalculation = 10, zoom = T, fontSize = 20, opacity = 1,
opacityNoHover = 1, colourScale = JS("d3.scaleOrdinal(d3.schemeCategory20);"))
network <- graph_from_data_frame(edges_df[,1:2], directed = F)
# summary
plot(network, vertex.label=NA, edge.arrow.size=0.25, vertex.size=3, edge.width=0.5)
plot(network, vertex.size=rescale(deg, c(1,8)), edge.arrow.size=0.25, edge.width=0.5, vertex.label=NA, layout=dlayout)
library(scales)
## Plotting in-degree, with vertices showing grade
dlayout <- layout.fruchterman.reingold(network)
plot(network, vertex.size=rescale(deg, c(1,8)), edge.arrow.size=0.25, edge.width=0.5, vertex.label=NA, layout=dlayout)
# degree
deg <- degree(network, mode = "all")
summary(deg)
hist(deg,breaks = 10)
## Plotting in-degree, with vertices showing grade
dlayout <- layout.fruchterman.reingold(network)
library(scales)
plot(network, vertex.size=rescale(deg, c(1,8)), edge.arrow.size=0.25, edge.width=0.5, vertex.label=NA, layout=dlayout)
E(network)$weight <- edges_df$weight
plot(network, vertex.size=rescale(deg, c(1,8)), edge.weight =  E(network)$weight, edge.arrow.size=0.25, edge.width=0.5, vertex.label=NA, layout=dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(1,8)),
vertex.label=NA, layout= layout_as_tree(network))
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(1,8)),
vertex.label=NA, layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(1,3)),
vertex.label=NA, layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.5,2)),
vertex.label=NA, layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.1,2)),
vertex.label=NA, layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices,
vertex.label.family = "helvetica",
vertex.font.size = 6,
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices,
vertex.label.family = "helvetica",
vertex.label.cex = 6,
layout= dlayout)
V(network)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=V(network),
vertex.label.family = "helvetica",
vertex.label.cex = 6,
layout= dlayout)
warning()
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=V(network),
layout= dlayout)
V(network)
V(network)$label
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices,
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices, vertex.label.cex = 6,
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices, vertex.label.cex = 1,
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices, vertex.label.cex = 0.1,
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices, vertex.label.cex = 0.4,
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices, vertex.label.cex = 0.3, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices, vertex.label.cex = 0.8, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=nodes_df$vertices, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout, edge.curved=.5)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica", edge.curved=.5)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica", edge.curved=.9)
cfg <- cluster_fast_greedy(as.undirected(network))
plot(cfg, as.undirected(network))
plot(cfg, as.undirected(network), vertex.label=NA)
plot(cfg, as.undirected(network), vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA)
cfg$membership
data.frame(cfg$membership, cfg$names)
membership <- data.frame(cfg$membership, cfg$names, stringsAsFactors = F)
View(membership)
membership$cfg.names[membership$cfg.membership==1]
membership$cfg.names[membership$cfg.membership==2]
membership$cfg.names[membership$cfg.membership==3]
membership$cfg.names[membership$cfg.membership==1] #fencing
membership$cfg.names[membership$cfg.membership==2]
membership$cfg.names[membership$cfg.membership==3]
membership$cfg.names[membership$cfg.membership==4]
View(edges_df)
# summary
plot(network, vertex.label=NA, edge.arrow.size=0.25, vertex.size=3, edge.width=0.5)
summary(network)
summary(network)
# degree
deg <- degree(network, mode = "all")
summary(deg)
hist(deg,breaks = 10)
summary(deg)
library(ggplot2)
ggplot(deg) + geom_histogram(data = deg, bin = 5)
hist(deg, breaks = 10, col = "blue")
hist(deg, breaks = 5, col = "blue")
hist(deg, breaks = 15, col = "blue")
hist(deg, breaks = 2à, col = "blue")
hist(deg, breaks = 20, col = "blue")
hist(deg, breaks = 20, col = "blue")
hist(deg, breaks = 20, col = "blue", xlab = "Degree")
hist(deg, breaks = 20, col = "blue", xlab = "Degree", main = "Histogram of graph degree")
hist(deg, breaks = 20, col = "blue", xlab = "Degree", main = "Histogram of graph degree",right = TRUE,)
hist(deg, breaks = 20, col = "blue", xlab = "Degree", main = "Histogram of graph degree",right = TRUE)
hist(deg, breaks = 20, col = "blue", xlab = "Degree", main = "Histogram of graph degree",right = F)
hist(deg, breaks = 20, col = "blue", xlab = "Degree", main = "Histogram of graph degree",right = T)
## Plotting in-degree, with vertices showing grade
dlayout <- layout.fruchterman.reingold(network)
library(scales)
plot(network, vertex.size=rescale(deg, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
# eigen
eig <- evcent(network)$vector
summary(eig)
# closeness
clo <- closeness(network)
summary(clo)
# eigen
eig <- evcent(network)$vector
summary(eig)
# transitivity
transitivity(network)
dendPlot(fg, mode="phylo")
fg <- cluster_fast_greedy(network, weights = E(network)$weight)
dendPlot(fg, mode="phylo")
# eigen
eig <- evcent(network)$vector
summary(eig)
# closeness
clo <- closeness(network)
summary(clo)
# betweenness
betweenness(network)
# betweenness
betweeness <- betweenness(network)
mean(betweeness)
pr <- bipartite.projection(network)
# eigen
eig <- evcent(network)$vector
summary(eig)
#rank
pr <- page.rank(network)$vector
summary(pr)
summary(betweeness)
# closeness
clo <- closeness(network)
summary(clo)
eig
sort(eig)
# closeness
clo <- closeness(network)
summary(clo)
sort(clos)
sort(clo)
sort(betweeness)
plot(network, vertex.size=rescale(betweeness, c(1,8)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(betweeness, c(1,10)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(betweeness, c(0.1,10)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(betweeness, c(0.1,20)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
plot(network, vertex.size=rescale(betweeness, c(0.1,50)),
edge.arrow.size=0.25, edge.width=rescale(E(network)$weight, c(0.2,2)),
vertex.label=NA, vertex.label.cex = 0.6, vertex.label.family = "Helvetica",
layout= dlayout)
setwd("~/Desktop/Projects/just-another-ds-blog")
blogdown::build_site()
blogdown::build_site()
setwd("~/Desktop/Projects/just-another-ds-blog")
setwd("~/Desktop/Projects/just-another-ds-blog/content")
blogdown::build_site()
setwd("~/Desktop/Projects/just-another-ds-blog")
blogdown::build_site()
blogdown::build_site()
setwd("~/Desktop/Projects/just-another-ds-blog")
blogdown::build_site()
blogdown::build_site()
setwd("~/Desktop/Projects/just-another-ds-blog")
blogdown::build_site()
blogdown::build_site()
setwd("~/Desktop/Projects/just-another-ds-blog/content")
setwd("~/Desktop/Projects/just-another-ds-blog")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
setwd("~/Desktop/Projects/just-another-ds-blog")
blogdown::build_site()
blogdown::build_site()
